const clientId = "23b4ec04283a4ae4b947535bac40fddf";
const redirectUri = "https://6309ad03801d6f35678c8616--warm-semolina-9e5e4c.netlify.app/";

let accessToken;

const Spotify = {
  getAccessToken() {
    // if accesstoken is already grabbed return token
    if (accessToken) {
      return accessToken;
    }
    // check for access token match and when the access token expires
    const tokenMatched = window.location.href.match(/access_token=([^&]*)/);
    const tokenExpires = window.location.href.match(/expires_in=([^&]*)/);

    // if access token & expiration time are in the url, set token value, set variable for expiration time
    if (tokenMatched && tokenExpires) {
      accessToken = tokenMatched[1];
      const expiresIn = Number(tokenExpires[1]);
      // clear parameters from url to avoid grabbing expired access token url
      window.setTimeout(() => (accessToken = ""), expiresIn * 1000);
      // add an entry to browser session history stack
      window.history.pushState("Acess Token", null, "/");
      return accessToken;
    } else {
      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;
      window.location = accessUrl;
    }
  },

  async search(term) {
    const accessToken = Spotify.getAccessToken();
    // token authentication, gives access to the bearer of this token. generated by the server in response to a login request
    // display the search results
    const response = await fetch(
      `https://api.spotify.com/v1/search?type=track&q=${term}`,
      {
        headers: { Authorization: `Bearer ${accessToken}` },
      }
    );
    const jsonResponse = await response.json();
    if (!jsonResponse.tracks) {
      return [];
    }
    return jsonResponse.tracks.items.map((track) => ({
      id: track.id,
      name: track.name,
      artist: track.artists[0].name,
      album: track.album.name,
      uri: track.uri,
    }));
  },

  // save users created playlist
  async savePlaylist(name, trackURIs) {
    if (!name || !trackURIs.length) {
      return;
    }
    const accessToken = Spotify.getAccessToken();
    const headers = { Authorization: `Bearer ${accessToken}` };
    let userId;

    const response = await fetch("https://api.spotify.com/v1/me", {
      headers: headers,
    });
    const jsonResponse = await response.json();
    userId = jsonResponse.id;
    //  console.log(jsonResponse.id);
    const postOne = await fetch(
      `https://api.spotify.com/v1/users/${userId}/playlists`,
      {
        headers: headers,
        method: "POST",
        body: JSON.stringify({ name: name }),
      }
    );
    const jsonResponse2 = await postOne.json();
    const playlistId = jsonResponse2.id;
    //    console.log(jsonResponse.id);
    //    console.log(playlistId);
    //     console.log(jsonResponse);
    await fetch(
      `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,
      {
        headers: headers,
        method: "POST",
        body: JSON.stringify({ uris: trackURIs }),
      }
    );
  },
};

export default Spotify;
